https://medium.com/@rajaraodv/webpack-the-confusing-parts-58712f8fcad9

#Different Styles 

   SCSS (Sassy CSS):
   We’re gonna use SCSS for a few reasons:
		readibility: the syntax is very similar to CSS
		learning curve: it only adds a few additional features on top of CSS
		compatibility; a CSS file is a valid SCSS file
		resources: lots of online articles to read and open source libraries to use
		expandibility: it’s easy to go from SCSS to Sass

	SASS (Syntactically Awesome StyleSheets)
	- Sass is the name of the preprocessor
	- Everything in SCSS is available in Sass
	- What Sass provides is:
		variables: instead of repeating #fce473 throughout your CSS file, just set $yellow: #fce473 once
		nesting: CSS rules can be nested within each other
		mixins: custom functions that can accept parameters and will prevent useless repetitions
		extensions: an easy way to inherit the same properties of another selector
		operators: adding/substracting/multiplying/dividing values, like 960px / 4 or $space * 2

	LESS (Leaner Style Sheets)
	- Is a backwards-compatible language extension for CSS. This is the official documentation for Less, 
	  the language and Less.js, the JavaScript tool that converts your Less styles to CSS styles.
	https://lesscss.org/#overview

	# Loader vs Plugins
	  - Loaders work at the individual file level during or before the bundle is generated.	
	  -	They define how your code will look like. With loaders, you can modify any part of your code.
	  - Loaders work at a file level. They can write template, process some code to transpile it depending on your convenience
	  
	  - Plugins work at bundle or chunk level and usually work at the end of the bundle generation process. 
	  - Webpack is a plugin with behavior by default, bundle assets. Adding a plugin in your configuration will add, sequentially, 
		one more step to the queue of tasks that webpack needs to do before giving away your files.
	  - Plugins work at a system level. They can work on pattern, file system handling (name, path), etc.

	  Plugins (https://webpack.js.org/concepts/plugins)
		- Plugins are the backbone of webpack. webpack itself is built on the same plugin system that you use in your webpack configuration!
		- They also serve the purpose of doing anything else that a loader cannot do.
		- A webpack plugin is a JavaScript object that has an apply method. This apply method is called by the webpack compiler, 
		  giving access to the entire compilation lifecycle.

	  Loaders (https://webpack.js.org/concepts/loaders/)
		- Loaders are transformations that are applied on the source code of a module. 
		- They allow you to pre-process files as you import or “load” them. 
		- Thus, loaders are kind of like “tasks” in other build tools and provide a powerful way to handle front-end build steps. 
		- Loaders can transform files from a different language (like TypeScript) to JavaScript or inline images as data URLs. 
		- Loaders even allow you to do things like import CSS files directly from your JavaScript modules
